# Whether to print the AWS Usage Report by account and service breakdown
print_usage = false
usage_days = 1

[ec2]
# Specifies whether EC2 enforcement is enabled or not
enabled = true
# State to enfoce, if any of the following conditions are not met. Possible
# states are: 'Stopped' and 'Terminated'
target_state = "Stopped"
# Defines required tags on each instance.
required_tags = ["Name", "Email", "Purpose"]
# Defines which instance types are allowed, empty means allow any types
allowed_instance_types = []
# The following resources will be ignored from rule enforcement
# ignore = ["instance-id1", "instance-id2"]
ignore = []

    # Identify any EC2 instances that appear to be idle based on the following
    # rules.
    [ec2.idle_rules]
    # Defines CPU utilization rules, the default is if the average CPU
    # utilization for 1 day, each data point aggeregated over 1 hour window,
    # is less than 0.5% then the instance will be enforced to its defined
    # target state
    # Note: 'granularity' max value is 86400 seconds and 'min_duration'
    # max value is 2 weeks without CloudWatch detailed monitoring enabled
    #
    # Defines if idle instances have to be nuked
    enabled = true
    min_utilization = 10
    min_duration = "1 day"
    granularity = "1 hour"

    # Defines whether to acknowledge the teraminate protection, if 'ignore' is
    # set to 'true' then the utility would ignore the termination protection
    # flag and would terminate the instances anyway.
    [ec2.termination_protection]
    ignore = true

    # Identify resources that are using Security Groups based on the following
    # rules.
    [ec2.security_groups]
    enabled = true
    from_port = 0
    to_port = 65535
    source_cidr = [ "0.0.0.0/0" ]

[ebs]
# Specifies whether to clean up Volumes that are detached and not being used
enabled = true
# State to enfore. Possible states are 'Deleted'
target_state = "Deleted"
# The following volumes will be ignored from rules enforcement
# ignore = ["vol-identifier-1", ...]
ignore = []

[rds]
# Specifies whether RDS enforcement is enabled or not
enabled = true
# State to enfoce, if any of the following conditions are not met. Possible
# states are: 'Stopped' and 'Terminated'
target_state = "Stopped"
# Defines required tags on each instance.
required_tags = ["Name", "Email", "Purpose"]
# Defines which instance types are allowed, empty means allow any types
allowed_instance_types = []
# The following resources will be ignored from rule enforcement
# ignore = ["db_instance_identifier-1", "db_instance_identifier-2"]
ignore = []

    # Defines CPU utilization rules, the default is if the average CPU
    # utilization for 1 day, each data point aggeregated over 1 hour window,
    # is less than 0.5% then the instance will be enforced to its defined
    # target state
    # Note: 'metric_granularity' max value is 86400 seconds and 'cpu_duration'
    # max value is 2 weeks without CloudWatch detailed monitoring enabled
    [rds.idle_rules]
    enabled = true
    min_utilization = 10
    min_duration = "1 day"
    granularity = "1 hour"
    connections = 50

    # Defines whether to acknowledge the teraminate protection, if 'acknowledge'
    # is set to 'true' then the utility would not try to terminate the instances
    # which has termination protection enabled.
    [rds.termination_protection]
    ignore = true

[aurora]
# Specifies whether RDS-Aurora enforcement is enabled or not
enabled = true
# State to enfoce, if any of the following conditions are not met. Possible
# states are: 'Stopped' and 'Terminated'
target_state = "Stopped"
# Defines required tags on each instance.
required_tags = ["Name", "Email", "Purpose"]
# Defines which instance types are allowed, empty means allow any types
allowed_instance_types = []
# The following resources will be ignored from rule enforcement
# ignore = ["db_cluster_identifier-1", "db_cluster_identifier-2"]
ignore = []

    # Defines CPU utilization rules, the default is if the average CPU
    # utilization for 1 day, each data point aggeregated over 1 hour window,
    # is less than 0.5% then the instance will be enforced to its defined
    # target state
    # Note: 'metric_granularity' max value is 86400 seconds and 'cpu_duration'
    # max value is 2 weeks without CloudWatch detailed monitoring enabled
    [aurora.idle_rules]
    enabled = true
    min_utilization = 10
    min_duration = "1 day"
    granularity = "1 hour"
    connections = 50

    # Defines whether to acknowledge the teraminate protection, if 'acknowledge'
    # is set to 'true' then the utility would not try to terminate the instances
    # which has termination protection enabled.
    [aurora.termination_protection]
    ignore = true

[redshift]
# Specifies whether Redshift enforcement is enabled or not
enabled = true
# State to enfoce, if any of the following conditions are not met. Possible
# states are: 'Stopped' and 'Terminated'. Redshift does not have a stop option
# so instead the DB will be terminated with a snapshot taken which will be valid
# for 7 days.
target_state = "Stopped"
# Defines required tags on each instance.
required_tags = ["Name", "Email", "Purpose"]
# Defines which instance types are allowed, empty means allow any types
allowed_instance_types = []
# The following resources will be ignored from rule enforcement
# ignore = ["db_cluster_identifier-1", "db_cluster_identifier-2"]
ignore = []

    # Defines CPU utilization rules, the default is if the average CPU
    # utilization for 1 day, each data point aggeregated over 1 hour window,
    # is less than 0.5% then the instance will be enforced to its defined
    # target state
    # Note: 'metric_granularity' max value is 86400 seconds and 'cpu_duration'
    # max value is 2 weeks without CloudWatch detailed monitoring enabled
    [redshift.idle_rules]
    enabled = true
    min_utilization = 10
    min_duration = "1 day"
    granularity = "1 hour"
    connections = 50

[s3]
enabled = false
target_state = "Deleted"
required_naming_prefix = "cw-"
ignore = []

# [emr]